<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:parsley="http://www.spicefactory.org/parsley"
					   xmlns:log="tileloader.log.*"
					   xmlns:view="tileloader.view.*"
					   width="422" height="450" 
					   showStatusBar="false" 
					   preinitialize="onPreinit();"
					   applicationComplete="onAppComplete()"
					   currentState="{getCurrentState(configurationModel.configured, authenticationModel.authenticated)}">
	<fx:Script>
		<![CDATA[
			import mx.logging.ILogger;
			import mx.logging.Log;
			
			import tileloader.context.ApplicationContext;
			import tileloader.controller.ErrorHandler;
			import tileloader.controller.WorkflowController;
			import tileloader.log.LogUtils;
			import tileloader.model.ApplicationConfig;
			import tileloader.model.AuthenticationModel;
			import tileloader.model.ThumbnailingViewModel;

			[Bindable]
			/**
			 * @private
			 * Reference to configuration data
			 */
			public var configurationModel:ApplicationConfig;

			[Bindable]
			/**
			 * @private
			 * Reference to authentication data
			 */
			public var authenticationModel:AuthenticationModel;
			
			/**
			 * @private
			 * Workflow controller
			 */
			public var workflow:WorkflowController;
			
			/**
			 * @private
			 * Error handler reference
			 */
			public var errorHandler:ErrorHandler;
			
			/**
			 * @private
			 * Returns state name according to mpdel state
			 */
			private function getCurrentState(configured:Boolean, authenticated:Boolean):String {
				return configured ? (authenticated ? "thumbnailing" : "authentication") : "configuration";
			}
			
			/**
			 * @private
			 * Preinitialization
			 */
			private function onPreinit():void {
				Log.addTarget(logTarget);
			}
			
			/**
			 * @private
			 * Application entry point
			 */
			private function run():void {
				workflow.run();
			}
			
			/**
			 * @private
			 * Global exception handler attachment
			 */
			private function onAppComplete():void {
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onGlobalError);
			}
			
			/**
			 * @private
			 * Global exception handler
			 */
			private function onGlobalError(event:UncaughtErrorEvent):void {
				if (null == errorHandler) return;
				
				errorHandler.handleError(event, this);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<log:ParsleyMessageLogTarget
			id="logTarget"
			includeDate="false"
			includeTime="true"
			includeCategory="true"
			includeLevel="true">
			<log:filters>
				<fx:Array>
					<fx:String>tileloader.*</fx:String>
				</fx:Array>
			</log:filters>
		</log:ParsleyMessageLogTarget>

		<parsley:ContextBuilder>
			<parsley:FlexConfig type="{ApplicationContext}"/>
			<parsley:RuntimeConfig instances="{[logTarget]}"/>
			<parsley:TaskCommandSupport/>                    
		</parsley:ContextBuilder>
		
		<parsley:FastInject injectionComplete="run()">
			<parsley:Inject property="configurationModel" type="{ApplicationConfig}"/>
			<parsley:Inject property="authenticationModel" type="{AuthenticationModel}"/>
			<parsley:Inject property="workflow" type="{WorkflowController}"/>
			<parsley:Inject property="errorHandler" type="{ErrorHandler}"/>
		</parsley:FastInject>
		
	</fx:Declarations>
	<s:states>
		<s:State name="configuration"/>
		<s:State name="authentication"/>
		<s:State name="thumbnailing"/>
	</s:states>
	<view:ConfigView includeIn="configuration" top="12" right="12" bottom="12" left="12"/>
	<view:AuthenticateView  includeIn="authentication" top="12" right="12" bottom="12" left="12"/>
	<view:ThumbnailingView includeIn="thumbnailing" top="12" right="12" bottom="12" left="12"/>
</s:WindowedApplication>
